import argparse
import json
import os
import matplotlib.pyplot as plt


def main():
    """Plot compression experiment metrics from a JSON results file and save as a PDF."""
    parser = argparse.ArgumentParser(
        description="Plot compression results (accuracy, loss, FLOPs‑ratio, params‑ratio) against the kept‑ratio."
    )
    parser.add_argument(
        "input_file",
        help="Path to the results JSON file generated by the experiment script.",
    )
    parser.add_argument(
        "--output",
        "-o",
        default="compression_results.pdf",
        help="Name of the output PDF file. Defaults to 'compression_results.pdf' in the current directory.",
    )
    args = parser.parse_args()

    # ---------------------------------------------------------------------
    # Load and prepare the data
    # ---------------------------------------------------------------------
    with open(args.input_file, "r", encoding="utf-8") as f:
        data = json.load(f)

    if not isinstance(data, list):
        raise ValueError("Expected a list of result dictionaries in the JSON file.")

    # Ensure the points are ordered along the x‑axis (ratio_to_keep)
    data = sorted(data, key=lambda d: d.get("metric_value", 0))

    ratio = [d["metric_value"] for d in data]
    accuracy = [d["accuracy"] for d in data]
    loss = [d["loss"] for d in data]
    flops_ratio = [d["flops_ratio"] for d in data]
    params_ratio = [d["params_ratio"] for d in data]

    # ---------------------------------------------------------------------
    # Build the PDF with four concise sub‑plots
    # ---------------------------------------------------------------------
    fig, axs = plt.subplots(2, 2, figsize=(11, 8.5), sharex=True)  # Letter size roughly

    # Accuracy
    axs[0, 0].plot(ratio, accuracy, marker="o")
    axs[0, 0].set_title("Accuracy vs. Kept‑Ratio")
    axs[0, 0].set_ylabel("Accuracy")

    # Loss
    axs[0, 1].plot(ratio, loss, marker="o")
    axs[0, 1].set_title("Loss vs. Kept‑Ratio")
    axs[0, 1].set_ylabel("Loss")

    # FLOPs ratio
    axs[1, 0].plot(ratio, flops_ratio, marker="o")
    axs[1, 0].set_title("FLOPs Ratio vs. Kept‑Ratio")
    axs[1, 0].set_ylabel("FLOPs Ratio")
    axs[1, 0].set_xlabel("Kept‑Ratio")

    # Parameters ratio
    axs[1, 1].plot(ratio, params_ratio, marker="o")
    axs[1, 1].set_title("Params Ratio vs. Kept‑Ratio")
    axs[1, 1].set_ylabel("Params Ratio")
    axs[1, 1].set_xlabel("Kept‑Ratio")

    # Styling tweaks
    for ax in axs.flat:
        ax.grid(True, linestyle="--", linewidth=0.5, alpha=0.7)

    fig.tight_layout()

    # ---------------------------------------------------------------------
    # Save figure and notify
    # ---------------------------------------------------------------------
    plt.savefig(args.output, bbox_inches="tight")
    print(f"Plot saved → {os.path.abspath(args.output)}")


if __name__ == "__main__":
    main()
